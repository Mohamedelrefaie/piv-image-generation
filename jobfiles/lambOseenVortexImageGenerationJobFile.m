function JOBFILE = lambOseenVortexImageGenerationJobFile();
% JOBFILE = lambOseenVortexImageGenerationJobFile()
% 
% This function creates the input structure for the function generateImages_LambVortex.m
% The fields specified in this image 
%
% INPUTS
%   None
%
% OUTPUTS
%   JOBFILE = Structure containing the parameters that specify the
%   parameters of the vortex, as well as the locations in which to save the
%   images.

%% Job options.
% Number of processors to use
% Currently this number doesn't actually specify a number
% of processors, but rather the code just checks if this number is 
% greater than 1, and if so runs parallel processing (a par-for loop) 
% rather than serial processing (a for loop). 
% This flag should really be re-named to "parallelProcessing".
%
% Note that you have to already have a parallel pool opened
% for the par-for loop to speed anything up. I disabled automatically
% starting and stopping the parallel pool because this was usually
% the slowest part of the whole workflow.
JOBFILE.JobOptions.NumberOfProcessors = 8;

% This specifies the number of digits in the file numbers 
% e.g., setting this to 6 will result in file names similar to
% "image_000001.tif", "image_000100.tif", etc.
JOBFILE.JobOptions.NumberOfDigits = 6;

% Flag specifying whether the field JOBFILE.ProjectRepository
% (which specifies the parent folder under which to save the images)
% refers to an absolute path on the filesystem,
% or relative path underneath the path generated by the function
% determineLocalRepositoryPath. The function determineLocalRepositoryPath.m
% determines the path on the local filesystem to a specified directory.
% This option is useful when calling these functions from multiple
% machines, where the path  to the project repository is different on each
% system. 
%
% This should generally be set to 1.
JOBFILE.JobOptions.DataRepositoryPathIsAbsolute = 1;

% Flag specifying whether to run compiled codes.
% This speeds things up by about 100 times. Refer to 
% this code package's documentation for
% instructions on using Matlab to compile its functions.  
JOBFILE.JobOptions.RunCompiled = 1;

% Image naming information.
% Images will be saved in the following folder:
% fullfile(ProjectRepository, 'analysis', 'data', ImageType, SetType, CaseName)
% JOBFILE.ProjectRepository = '/Users/matthewgiarra/Documents/School/VT/Research/Aether/FMC/';
JOBFILE.ProjectRepository = '..';
JOBFILE.ImageType = 'synthetic';
JOBFILE.SetType = 'vortex';
JOBFILE.CaseName = 'piv_benchmark_vortex_images';

% These are the height and width of the generated images in pixels
JOBFILE.Parameters.Images.Height = 1024;
JOBFILE.Parameters.Images.Width  = 1024;

% Particle concentration (particles per pixel)
JOBFILE.Parameters.Images.ParticleConcentration = 0.025; 

% This is the average particle diameter in pixels
JOBFILE.Parameters.Images.ParticleDiameter.Mean = sqrt(8); 

% This is the standard deviation of particle diameter (in pixels)
% with in each image. Set this to zero for a uniform particle diameter,
% and set to some positive value to allow for variable particle sizes.
JOBFILE.Parameters.Images.ParticleDiameter.StandardDeviation = 0; 

% This is the extension of the images to be saved.
JOBFILE.Parameters.Images.Extension = '.tif';

% This is the class of the images that will be saved. 
% Options:
% 'uint16' for 16 bit unsigned integer.
% 'uint8'  for 8 bit unsigned integer.
% 'double' for double precision floating point.
JOBFILE.Parameters.ImageClass = 'uint16';

% Number of the first set of images to generate. Initial particle positions
% are re-generated at the beginning of each set; particles are advected
% through time during each set. 
JOBFILE.Parameters.Sets.Start = 1;

% Number of the last set of images to generate
JOBFILE.Parameters.Sets.End = 1;

% Number of images to generate per set. Larger numbers of images per set result in 
% more time through which the particle positions are advected. 
JOBFILE.Parameters.Sets.ImagesPerSet = 1000;

% Diameter of the vortex ring (i.e. spacing between cores) (pixels)
JOBFILE.Parameters.Vortex.VortexRadius = 200;

% Diameter of each the vortex core
% (i.e. radial distance from each core center at 
% which max tangential velocity occurs)
JOBFILE.Parameters.Vortex.CoreRadius = 100;

% This is the peak tangential particle displacement due to 
% each vortex core (pixels per frame).
JOBFILE.Parameters.Vortex.PeakVelocity = 3;

% This is the displacement of the vortex cores in the direction 
% perpendicular to the line connecting the two cores (pixels per frame)
JOBFILE.Parameters.Vortex.PropagationVelocity = 0;

% Starting position of the vortex in the image
% as a fraction of the image size. 
% Setting each to 0.5 results in the vortex
% being centered within the image.
JOBFILE.Parameters.Vortex.Position.X = 0.5;
JOBFILE.Parameters.Vortex.Position.Y = 0.5;

% Angle between the vortex ring propogation axis
% and the horizontal axis (degrees)
JOBFILE.Parameters.Vortex.Angle = 0;

% Simulation times. This should generally not be changed from default.
JOBFILE.Parameters.Vortex.StartTime = 0;
JOBFILE.Parameters.Vortex.EndTime = JOBFILE.Parameters.Sets.ImagesPerSet - 1; 

% These lines specify the percentage of the displacement noise that
% falls below DisplacementNoiseLevel
JOBFILE.Parameters.Flow.DisplacementNoiseLevel = 0;
JOBFILE.Parameters.Flow.DisplacementNoiseConfidenceInterval = 0.50;

% These lines specify the amount of Gaussian white noise 
% in the images. 
JOBFILE.Parameters.Noise.Mean = 0.10;
JOBFILE.Parameters.Noise.Std = 0.05;
JOBFILE.Parameters.Noise.Background = 0.02;

% This flag specifies whether to simulate image noise.
JOBFILE.JobOptions.SimulateNoise = 1;

% This line specifies whether to simulate the in-plane Gaussian profile
% of the beam, i.e., brighter in the center of the image
% and dimmer at the left and right edges. 
JOBFILE.JobOptions.SimulateBeam = 1;



end

 